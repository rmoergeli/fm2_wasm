@page "/fetchdataview"
@using fm2_wasm.Shared
@using fm2_wasm.Client.ViewModels
@using System.ComponentModel;
@inject HttpClient Http
@inject WeatherViewModel weatherViewModel

<h1>Weather forecast view</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (weatherViewModel.WeatherForecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in weatherViewModel.WeatherForecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        weatherViewModel.PropertyChanged += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                try
                {
                    StateHasChanged();
                }
                catch { }
            });
        };
        await base.OnInitializedAsync();
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        weatherViewModel.PropertyChanged -= OnPropertyChangedHandler;
    }
}
